定义：提供一个创建一一系列相关或相互依赖对象的接口，而无需指定他们具体的类。
描述：抽象工厂与工厂方法不同的是，抽象工厂的一个具体工厂生产的产品不止一个，而是一组产品族，具体工厂是按照（品牌）产品族的不同
     而划分的，而抽象产品会有很多种，抽象产品下的具体产品是不同品牌的同一种类型的产品（如清扬的洗发水和海飞丝的洗发水），
     这样使得在客户端里面实例化工厂时只需根据多态实例化具体的工厂，而工厂创建产品的接口方法名则完全相同，做到了最大程度的解耦，
     但是因为在客户端在创建工厂时还需指定工厂的具体名称，所以还没有做到完全的解耦，要做到客户端与工厂的完全解耦，可以使用配置文件，
     通过反射来创建工厂。
抽象工厂的优点：1.抽象工厂最大的好处在于易于交换产品系列（即在客户端里修改具体工厂名（品牌供应商）），由于具体工厂类只需要在客户端里出现一次，
              这使改变一个具体工厂变得非常容易。
              2.它让具体的创建实例过程与客户端分离，客户端是通过他们的抽象接口操作实例（即抽象工厂和抽象产品），产品的具体名也被具体工厂的实现
                分离，不会出现在客户端代码中。
抽象工厂的缺点：1.没有做到具体工厂与使用工厂的类的完全解耦。
               2.若需要增加一个产品则需要修改所有的工厂类。
使用反射优化后的抽象工厂：若需要增加一个Oracle数据库，则需要新增OracleUser和OracleDepartment类。Factory代码无需改动，只需修改配置文件即可
                       完全符合开闭原则。